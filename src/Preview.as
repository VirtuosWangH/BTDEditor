package {		import flash.display.MovieClip;	import flash.display.StageScaleMode;		import EasyBox2D.EasyBox2D;		import editor.parsers.StringToObject;		dynamic public class Preview extends MovieClip {				private var _data:String;		private var _sim:EasyBox2D;				private var _debug:Boolean; 		public function Preview(){						stage.scaleMode = StageScaleMode.NO_SCALE;						_data = "var auto4:BaseObject = sim.addBox({x:6.5, y:4.5, width:1, height:1, angle: 0, density:1}); var auto5:BaseObject = sim.addBox({x:8.5, y:6.5, width:1, height:1, angle: 0, density:1}); // joints: var auto6:BaseObject = sim.addJoint({a:auto4.body, b:auto5.body, x1:6.33, y1:4.33, x2:8.67, y2:6.67});"						if (root.loaderInfo.parameters.data){				_data = root.loaderInfo.parameters.data;			}						_debug = false;			if (root.loaderInfo.parameters.debug){				if (root.loaderInfo.parameters.debug == "true"){					_debug = true;					graphics.beginFill(0x000000);					graphics.drawRect(0,0,800, 600);				}else{				    _debug = false				}			}						 			var sw:Number = 800 / 30;			var sh:Number = 600 / 30;			 			_sim = new EasyBox2D(this, {debug:_debug, gravityY:10});			_sim.addBox({x:sw / 2, y:sh, width:sw -1, height:1,  density:.0});			_sim.addBox({x:sw / 2, y:0, width:sw -1, height:1,  density:.0});			_sim.addBox({x:0, y:sh / 2, width:1, height:sh ,  density:.0});			_sim.addBox({x:sw, y:sh / 2, width:1, height:sh ,  density:.0});						parse();			_sim.start();            _sim.mouseDrag();			 		}					private function parse():void{			var lines:Array = new Array();			lines = _data.split(";");			for (var i:int = 0; i<lines.length; i++){				//trace(i, "-->", lines[i]);				// see if there is a variable name				var nameDef:String = "";				if (lines[i].indexOf("var")!=-1){					nameDef = lines[i].match(/var\s+[a-z, A-Z,0-9].+\:BaseObject/);					nameDef = nameDef.replace(/var\s+/, "");					nameDef = nameDef.replace(/\:BaseObject/, "");					//trace(nameDef);				}								// get the object definition:				var objString:String = lines[i].match(/\{.*\}/);				// see if there are any box definitions and create BoxObject() instances accordinly				if (lines[i].indexOf("addBox") != -1){					this[nameDef] = _sim.addBox(StringToObject.parse(objString));				}else if (lines[i].indexOf("addCircle") != -1){					this[nameDef] = _sim.addCircle(StringToObject.parse(objString));				}else if (lines[i].indexOf("addPoly") != -1){					this[nameDef] = _sim.addPoly(StringToObject.parse(objString));				}else if (lines[i].indexOf("addJoint") != -1){					//shape = new JointObject();					var obj:Object = StringToObject.parse(objString);					// we need to parse out the references to BaseObjects for all joints					var a:Array = obj.a.split(".");					obj.a = this[a[0]].body					var b:Array = obj.b.split(".");					obj.b = this[b[0]].body					this[nameDef] = _sim.addJoint(obj);				}			 			}					}			}}